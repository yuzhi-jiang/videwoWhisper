1
00:00:00,000 --> 00:00:01,380
然后一提示我就进来了

2
00:00:01,980 --> 00:00:02,340
可以

3
00:00:04,520 --> 00:00:05,760
然后我画下图

4
00:00:07,320 --> 00:00:09,880
就是讲一下刚好那个五节有点问题

5
00:00:09,880 --> 00:00:11,140
我就讲讲这个密等嘛

6
00:00:11,140 --> 00:00:12,100
消息的密等

7
00:00:18,520 --> 00:00:18,880
嗯

8
00:00:47,160 --> 00:00:48,680
这个是密等的一个定义啊

9
00:00:48,680 --> 00:00:50,920
就是我们经常说那个消息的一个密等

10
00:00:50,920 --> 00:00:51,440
对吧

11
00:00:52,400 --> 00:00:52,720
嗯

12
00:00:52,720 --> 00:00:54,000
这个能理解吧

13
00:00:56,680 --> 00:00:57,880
然后一般来讲呢

14
00:01:06,020 --> 00:01:09,080
一般来讲上游就是这个什么生产者

15
00:01:10,380 --> 00:01:11,040
然后呢

16
00:01:11,560 --> 00:01:14,060
投递到这个消息电链

17
00:01:14,700 --> 00:01:15,660
再然后呢

18
00:01:15,660 --> 00:01:18,360
消息电链又放到这个消费者

19
00:01:18,360 --> 00:01:20,700
其实就是这么这么两步操作嘛

20
00:01:22,420 --> 00:01:23,220
对啊

21
00:01:23,220 --> 00:01:24,280
然后呃

22
00:01:24,280 --> 00:01:25,360
我们要求的是什么呢

23
00:01:25,360 --> 00:01:27,420
上游去投递一个消息

24
00:01:27,420 --> 00:01:29,440
然后给下游消费者去消费

25
00:01:29,440 --> 00:01:31,380
但是要保证下游对这个结

26
00:01:31,380 --> 00:01:33,200
这个退众这个业务只处理一次

27
00:01:33,200 --> 00:01:34,520
那这个怎么搞

28
00:01:37,440 --> 00:01:39,460
其实这里面涉及到两个问题啊

29
00:01:39,460 --> 00:01:40,820
就是呃

30
00:01:40,820 --> 00:01:41,460
第一个

31
00:01:42,880 --> 00:01:43,280
为什么

32
00:01:45,040 --> 00:01:47,000
为什么会多次执行

33
00:01:58,620 --> 00:01:59,420
第二个

34
00:01:59,800 --> 00:02:00,080
啊

35
00:02:00,080 --> 00:02:00,380
啊

36
00:02:00,380 --> 00:02:00,440
啊

37
00:02:00,440 --> 00:02:00,500
ok

38
00:02:00,500 --> 00:02:01,640
然后我再接受啊

39
00:02:01,640 --> 00:02:04,340
就是我们生产者正常投递一个消息到这儿

40
00:02:04,340 --> 00:02:05,440
这儿在这儿在到这儿

41
00:02:05,440 --> 00:02:05,600
对吧

42
00:02:05,600 --> 00:02:06,600
他就投递了一条呀

43
00:02:06,600 --> 00:02:10,340
为什么他会呃可能有可能会接收到很多条一样的消息呢

44
00:02:10,660 --> 00:02:13,660
是因为呃我们这种在比如说最简单的例子啊

45
00:02:13,660 --> 00:02:16,320
他投递这个的时候他可能呃这个超时了

46
00:02:16,320 --> 00:02:17,100
然后他一直从事

47
00:02:17,100 --> 00:02:19,840
他其实超时的话可能这个消息真是投递过来了

48
00:02:19,840 --> 00:02:20,160
对吧

49
00:02:21,340 --> 00:02:21,740
然后呢

50
00:02:21,740 --> 00:02:24,340
那这个消息对面就接收到了很多一样的消息

51
00:02:24,340 --> 00:02:25,340
因为他有从事的机制嘛

52
00:02:26,620 --> 00:02:27,100
对吧

53
00:02:27,720 --> 00:02:30,380
然后可能大游消费者就可能消费到了很多一样的数据

54
00:02:32,100 --> 00:02:34,240
这个就是这个问题场景是一定存在的

55
00:02:34,240 --> 00:02:35,440
只是说概率的问题

56
00:02:35,440 --> 00:02:37,200
但是从理论上来说一定会存在的

57
00:02:37,200 --> 00:02:37,720
对吧

58
00:02:40,060 --> 00:02:40,380
是的

59
00:02:40,820 --> 00:02:41,440
啊ok

60
00:02:41,440 --> 00:02:43,080
然后我们我们再接着说啊

61
00:02:43,080 --> 00:02:46,480
那既然说上游有可能会投递同样的消息过来

62
00:02:46,840 --> 00:02:47,160
好

63
00:02:47,960 --> 00:02:50,900
那我那其实那就不用关心他怎么发送嘛

64
00:02:50,900 --> 00:02:51,840
那就是看他怎么处理

65
00:02:51,840 --> 00:02:54,120
一般来讲就是说有一个

66
00:02:55,700 --> 00:02:56,880
上游颁发

67
00:02:58,480 --> 00:02:59,480
颁发一个

68
00:03:01,160 --> 00:03:02,020
一个为

69
00:03:02,980 --> 00:03:04,800
唯一的id

70
00:03:04,800 --> 00:03:07,100
比如说订单号

71
00:03:10,220 --> 00:03:10,740
对吧

72
00:03:10,740 --> 00:03:11,640
然后给这儿

73
00:03:11,640 --> 00:03:12,680
那那有可能就说

74
00:03:12,680 --> 00:03:14,920
呃我这个消息投递过来的时候呢

75
00:03:14,920 --> 00:03:16,340
比如投了好几个消息吧

76
00:03:16,900 --> 00:03:17,340
嗯

77
00:03:17,340 --> 00:03:19,420
但是最最重要他们的这个呃

78
00:03:19,820 --> 00:03:21,840
订单id那可能都是111

79
00:03:23,780 --> 00:03:24,320
对吧

80
00:03:24,320 --> 00:03:28,060
那其实就是对消费者来说怎么处理这种重复的这个这个消息吗

81
00:03:28,060 --> 00:03:28,700
对不对

82
00:03:31,000 --> 00:03:31,400
是

83
00:03:31,980 --> 00:03:32,680
啊好

84
00:03:32,680 --> 00:03:34,740
那那我们一般怎么搞呢

85
00:03:34,740 --> 00:03:35,700
其实也很简单

86
00:03:35,700 --> 00:03:38,940
就是说这个消费者这个一般来说是这么处理的

87
00:03:38,940 --> 00:03:40,580
就是他拿到这个消息之后他分三步啊

88
00:03:40,580 --> 00:03:41,460
第一步

89
00:03:41,900 --> 00:03:42,220
呃

90
00:03:42,220 --> 00:03:43,780
执行业务逻辑

91
00:03:45,000 --> 00:03:46,200
或者第一步先脚验吧

92
00:03:46,880 --> 00:03:48,980
先脚验这个看你的业务吧

93
00:03:48,980 --> 00:03:49,980
这无所谓先脚验

94
00:03:51,200 --> 00:03:52,220
先脚验脚验什么

95
00:03:52,220 --> 00:03:55,080
就是我们在数据库针对这个 id 建立一个唯一索引

96
00:03:56,340 --> 00:03:56,660
呃

97
00:03:56,660 --> 00:03:57,460
他有一个记录表

98
00:03:59,520 --> 00:04:03,080
做一个消息记录表针对

99
00:04:04,560 --> 00:04:04,880
呃

100
00:04:04,880 --> 00:04:08,080
订单 id 做唯一索引

101
00:04:09,220 --> 00:04:10,440
这是消费者做的事啊

102
00:04:11,260 --> 00:04:13,200
然后我们再说他呃

103
00:04:13,200 --> 00:04:14,460
怎么处理这个消息的逻辑

104
00:04:14,460 --> 00:04:14,940
第一步呢

105
00:04:14,940 --> 00:04:15,860
拿到这个消息之后

106
00:04:15,860 --> 00:04:16,500
订单111

107
00:04:16,500 --> 00:04:17,280
第一步先脚验

108
00:04:17,280 --> 00:04:18,040
怎么脚验呢

109
00:04:18,040 --> 00:04:18,940
其实就直接插入

110
00:04:19,420 --> 00:04:19,960
记录表

111
00:04:21,300 --> 00:04:22,340
如果他第一次进来

112
00:04:22,340 --> 00:04:23,440
那肯定就成功了

113
00:04:23,440 --> 00:04:23,660
对吧

114
00:04:23,660 --> 00:04:24,560
因为这里面没有数据

115
00:04:24,560 --> 00:04:25,200
对不对

116
00:04:26,160 --> 00:04:26,720
对啊

117
00:04:26,720 --> 00:04:28,260
然后在执行业务逻辑

118
00:04:28,260 --> 00:04:29,040
可能说他要去

119
00:04:29,040 --> 00:04:29,980
订单啊

120
00:04:29,980 --> 00:04:30,460
发货啊

121
00:04:30,460 --> 00:04:31,140
什么东西都可以

122
00:04:31,140 --> 00:04:31,960
订单发货呀

123
00:04:31,960 --> 00:04:33,580
或者扣减扣存吧

124
00:04:33,580 --> 00:04:34,300
我只是打个地方

125
00:04:34,300 --> 00:04:35,400
看公司的业务不一样

126
00:04:38,300 --> 00:04:38,820
都可以

127
00:04:38,820 --> 00:04:39,960
那业务处理完之后呢

128
00:04:39,960 --> 00:04:40,320
哎

129
00:04:41,740 --> 00:04:43,200
然后在ac 手动

130
00:04:44,940 --> 00:04:45,680
手动的ac

131
00:04:46,720 --> 00:04:47,960
就是ac 什么意思啊

132
00:04:49,200 --> 00:04:50,940
就是确认消费成功

133
00:04:52,260 --> 00:04:53,420
就是这几步啊

134
00:04:53,420 --> 00:04:54,480
然后呃

135
00:04:54,480 --> 00:04:55,440
这两步一般来讲

136
00:04:55,440 --> 00:04:56,480
他是在一个本地事务里边

137
00:04:57,740 --> 00:04:58,660
这个注解认识吧

138
00:05:00,320 --> 00:05:00,920
这是啊

139
00:05:00,920 --> 00:05:01,760
事务注解

140
00:05:02,840 --> 00:05:03,140
啊

141
00:05:03,140 --> 00:05:03,440
其实

142
00:05:03,760 --> 00:05:05,020
这就是他的一个消费逻辑

143
00:05:05,020 --> 00:05:06,240
一般来讲都是这么这么搞的

144
00:05:06,240 --> 00:05:06,680
啊

145
00:05:06,680 --> 00:05:07,360
然后我们思考一下

146
00:05:07,360 --> 00:05:08,020
他这个流程啊

147
00:05:08,020 --> 00:05:08,960
第一次一来

148
00:05:08,960 --> 00:05:09,240
对吧

149
00:05:09,240 --> 00:05:10,300
他插入一个记录表

150
00:05:10,300 --> 00:05:10,660
然后呢

151
00:05:10,660 --> 00:05:11,420
执行这个业务逻辑

152
00:05:11,420 --> 00:05:12,220
执行完了之后呢

153
00:05:12,220 --> 00:05:13,500
手动ac 确认成功了

154
00:05:13,500 --> 00:05:13,860
对吧

155
00:05:14,940 --> 00:05:15,260
嗯

156
00:05:15,260 --> 00:05:15,760
啊

157
00:05:15,760 --> 00:05:17,380
像是他又有一个同样的订单ID

158
00:05:17,380 --> 00:05:17,760
进来了

159
00:05:17,760 --> 00:05:18,120
呦

160
00:05:18,120 --> 00:05:19,200
他直接插入就失败了

161
00:05:19,200 --> 00:05:20,720
因为我这里已经记录了

162
00:05:20,720 --> 00:05:21,060
对吧

163
00:05:22,100 --> 00:05:22,740
对啊

164
00:05:22,740 --> 00:05:23,180
那其实

165
00:05:23,180 --> 00:05:24,980
那其实在后面再来很多条

166
00:05:24,980 --> 00:05:25,640
多少条都一样

167
00:05:25,640 --> 00:05:26,860
我这里已经记好了之后

168
00:05:26,860 --> 00:05:28,040
我就不会再去处理

169
00:05:28,040 --> 00:05:28,920
上面的业务逻辑了

170
00:05:28,920 --> 00:05:31,040
那这个其实不就等于是密等了吗

171
00:05:31,760 --> 00:05:32,080
嗯

172
00:05:32,080 --> 00:05:33,240
组层架构呢

173
00:05:34,320 --> 00:05:34,640
什么

174
00:05:35,920 --> 00:05:37,240
那个组层架构

175
00:05:38,020 --> 00:05:38,220
呃

176
00:05:38,220 --> 00:05:39,040
组层架构

177
00:05:39,040 --> 00:05:40,340
你是说什么组层架构

178
00:05:42,160 --> 00:05:43,140
你说数据库对吧

179
00:05:43,140 --> 00:05:44,240
这个唯一所以的数据库

180
00:05:46,480 --> 00:05:47,060
这个的话

181
00:05:47,060 --> 00:05:49,340
我是在你听你那个就是

182
00:05:49,920 --> 00:05:50,240
嗯

183
00:05:50,240 --> 00:05:53,260
怎么保证那个消息可靠性的时候

184
00:05:53,260 --> 00:05:55,380
听到是你你是这么说的

185
00:05:55,820 --> 00:05:56,140
啊

186
00:05:56,860 --> 00:05:57,180
啊

187
00:05:57,180 --> 00:05:58,500
那是这个消息对内

188
00:05:59,120 --> 00:05:59,440
嗯

189
00:05:59,440 --> 00:06:00,940
但是和这个没有啥关系

190
00:06:00,940 --> 00:06:01,200
知道吗

191
00:06:01,200 --> 00:06:02,460
那个是保证消息不丢失啊

192
00:06:02,460 --> 00:06:03,740
就是同步在这一份之后呢

193
00:06:03,740 --> 00:06:04,880
可能主节点要当机嘛

194
00:06:04,880 --> 00:06:06,260
又给重节点同步一分

195
00:06:06,260 --> 00:06:07,260
这个无所谓啊

196
00:06:08,300 --> 00:06:08,620
哦

197
00:06:09,000 --> 00:06:09,320
啊

198
00:06:09,320 --> 00:06:13,460
这个和这个订单重复和这个消息重复了做密的没有啥关系对不对

199
00:06:14,260 --> 00:06:16,620
这个消息对内的主从是保证消息不丢失的事

200
00:06:17,240 --> 00:06:18,460
就不要放在一块说

201
00:06:18,800 --> 00:06:19,120
嗯

202
00:06:19,120 --> 00:06:20,160
懂了啊

203
00:06:20,160 --> 00:06:20,580
ok

204
00:06:21,520 --> 00:06:23,960
然后呃我们又讲啊就是一般来说

205
00:06:24,280 --> 00:06:28,580
我可能为了假如你这个业务性能比要求比较高的话他会在前面就先加个redis

206
00:06:29,360 --> 00:06:30,520
呃分不失所做点

207
00:06:31,380 --> 00:06:32,080
支配上呢

208
00:06:32,600 --> 00:06:32,920
支配上呢

209
00:06:32,920 --> 00:06:33,320
就快一点

210
00:06:33,740 --> 00:06:46,380
它可能就防止啊我同时有很多这个订单呃假如一秒钟吧他同时来100个不知道什么情况对吧来了100个那可能每次你都要去超入一下这个记录表然后报个错那其实不太友好这个性能也很差对不对

211
00:06:46,820 --> 00:06:47,180
嗯

212
00:06:47,180 --> 00:06:56,000
所以他就呃在这个本地事务之前呢先加个redis分不失所就防止呃防止什么防止第一个第一个性能高对吧

213
00:06:56,560 --> 00:06:58,180
第二个防止

214
00:06:59,820 --> 00:07:03,300
防止同时有很多消息过来

215
00:07:03,780 --> 00:07:10,280
但是具体这个什么情况下有很多同时消息过来呃不可靠呀因为上游他具体怎么样他怎么生产的可能倒就是

216
00:07:10,820 --> 00:07:17,980
抽筋了呢对吧我们一定要做好这种接口的这个一个防护一个安全的降级的侧面或者兜底的侧面啊能理解吗

217
00:07:19,080 --> 00:07:19,980
可以啊OK

218
00:07:20,420 --> 00:07:21,740
啊所以就是这么个事

219
00:07:24,920 --> 00:07:27,380
我们刚才讲讲了什么啊再回归一下

220
00:07:27,380 --> 00:07:33,320
第一个讲其实我们今天讲的是密等然后第一个回过了密等定义是什么意思呢就是执行呃

221
00:07:34,800 --> 00:07:39,920
很多次后最终结果都一样这个是执行的可以可以是什么接口

222
00:07:41,460 --> 00:07:46,120
也可以是函数对吧在我们这里其实就是这个消息消费的逻辑是密等的对吧

223
00:07:47,000 --> 00:07:47,640
嗯啊

224
00:07:48,680 --> 00:07:57,140
然后呃密等那说到密等那肯定是他要他是要一个解决方案嘛那他解决的问题是什么呢就是防止上游给你一个消息给你传递了很多遍

225
00:07:57,140 --> 00:08:00,520
那为什么会传递很多遍那这个场景我也说了对吧

226
00:08:01,500 --> 00:08:02,380
这个重设

227
00:08:03,680 --> 00:08:05,140
超市重设机制对吧

228
00:08:05,940 --> 00:08:06,600
引起的

229
00:08:07,720 --> 00:08:13,960
对吧然后我们再说怎么解决这个是问题场景啊再说怎么解决方案的解决方案就是说呃上游颁发一个唯一的id

230
00:08:13,960 --> 00:08:14,660
比如说电单号

231
00:08:14,660 --> 00:08:21,080
然后传到这然后传到这然后他的消费逻辑呢呃就是一般来讲就是本地事务里面先脚印然后再执行业务逻辑在手动ack

232
00:08:21,080 --> 00:08:22,860
就完了就没效了

233
00:08:27,240 --> 00:08:28,200
有有啥问题吗

234
00:08:29,260 --> 00:08:30,960
没问题了没问题了啊

235
00:08:31,300 --> 00:08:31,980
其他人呢

236
00:08:38,860 --> 00:08:42,020
是没听懂吗还是陷入了沉思啊都可以说一下

237
00:08:45,420 --> 00:08:46,620
听听懂了也回复一下

238
00:08:48,180 --> 00:08:48,500
哎

239
00:08:48,500 --> 00:08:49,240
k哥啊

240
00:08:49,940 --> 00:08:50,580
我有问题

241
00:08:50,580 --> 00:08:51,140
请说

242
00:08:51,140 --> 00:09:06,540
比如我看那个说密的话呃reddit分分不分不失锁然后我看网上有这样做的但是但是一说用那个赛赛赛的nx做分不失锁啊我想明白他是怎么做那个密等的

243
00:09:07,160 --> 00:09:08,600
啊那个赛赛的nx

244
00:09:08,600 --> 00:09:09,380
ok

245
00:09:10,120 --> 00:09:11,640
那这个是另外一个话题了对吧

246
00:09:13,340 --> 00:09:13,640
啊

247
00:09:14,600 --> 00:09:28,580
就是就是呃没事就是我这个问题会给你讲的但是有时候我给你们讲记说就是一定要明确一个点就是呃你你其实这个问题是因为讲消息密等的时候引发另一个问题对吧就就怎么使用密等的对吧啊就是我们的时刻得知道自己的问题是谁然后问题在哪

248
00:09:28,580 --> 00:09:30,540
就现在这个密等没问题吧

249
00:09:31,260 --> 00:09:32,940
没问题这个逻辑没问题啊

250
00:09:32,940 --> 00:09:38,020
行那我就那我其实我那我觉得再跟你讲一讲就是说呃reddit是怎么做密等的对吧

251
00:09:39,640 --> 00:09:48,780
其实呃我们就说他做分布是锁也好做密等也好其实都是一个原则就是说就说什么呢呃我们说其实这个是一道分布是锁的一个形成原理啊

252
00:09:52,020 --> 00:09:57,360
他其实保证什么呃分布式环境下只有一个

253
00:09:59,220 --> 00:10:07,800
线程能够获取到锁这个锁是一个抽象的概念是一个抽象的概念这个我之后会再说啊

254
00:10:08,020 --> 00:10:09,120
但是说这句话能理解吗

255
00:10:09,840 --> 00:10:10,900
这个说的是人话吧

256
00:10:11,260 --> 00:10:14,740
有没有听不懂的分布是环境下边就是很多个服务对吧

257
00:10:16,280 --> 00:10:21,440
其实呃我们讲的分布是锁呃用什么用myscore可以实现用reddit也可以实现

258
00:10:22,820 --> 00:10:27,200
我先给你讲这个reddit的原理啊首先reddit是单线程的这个知道吧

259
00:10:27,760 --> 00:10:28,040
知道

260
00:10:28,820 --> 00:10:29,100
啊

261
00:10:29,580 --> 00:10:30,560
reddit是单线程的

262
00:10:31,000 --> 00:10:31,280
好

263
00:10:31,280 --> 00:10:31,940
然后呢

264
00:10:31,940 --> 00:10:33,380
现在我有很多个服务

265
00:10:34,240 --> 00:10:35,220
a服务对吧

266
00:10:37,080 --> 00:10:37,660
然后呢

267
00:10:38,420 --> 00:10:39,880
a服务现在就俩吧

268
00:10:40,780 --> 00:10:44,000
然后呃他们对他发起一个setnx的一个请求对吧

269
00:10:47,320 --> 00:10:48,980
我来发起他们同时发起请求

270
00:10:48,980 --> 00:10:49,500
set

271
00:10:50,940 --> 00:10:51,260
set

272
00:10:51,840 --> 00:10:52,420
nx

273
00:10:52,420 --> 00:10:53,340
可以啊

274
00:10:53,340 --> 00:10:54,460
国庆还没看到这

275
00:10:54,900 --> 00:10:55,220
可以

276
00:10:55,220 --> 00:10:55,720
你可以

277
00:10:55,720 --> 00:10:58,180
之后这个留着你之后看到这你再看吧

278
00:10:58,180 --> 00:10:58,460
没事

279
00:10:58,920 --> 00:11:01,080
嗯我给那个春慧你们讲讲

280
00:11:01,080 --> 00:11:01,840
嗯

281
00:11:01,840 --> 00:11:04,080
然后春慧这个setnx知道吧

282
00:11:04,080 --> 00:11:04,720
哦知道

283
00:11:04,720 --> 00:11:06,700
setnx什么意思你先说说

284
00:11:07,420 --> 00:11:11,020
他不是就底层的就属于随简一般的那个分布之锁吗

285
00:11:11,020 --> 00:11:13,280
啊然后反为1和0

286
00:11:13,820 --> 00:11:15,140
啊他的逻辑是什么呢

287
00:11:16,220 --> 00:11:16,980
逻辑

288
00:11:16,980 --> 00:11:17,700
嗯

289
00:11:18,480 --> 00:11:21,660
我知道的就是存一个类似就是存一个k

290
00:11:22,220 --> 00:11:24,000
存个k然后判断那个k

291
00:11:24,520 --> 00:11:25,160
有没有

292
00:11:25,160 --> 00:11:26,720
就判断这个锁

293
00:11:26,720 --> 00:11:29,160
这个setnx给他拼一下造下去啊

294
00:11:29,160 --> 00:11:30,260
他他全名叫什么

295
00:11:32,920 --> 00:11:33,400
不知道

296
00:11:33,400 --> 00:11:34,120
不知道

297
00:11:34,800 --> 00:11:36,480
那你说你能看明白吗

298
00:11:37,340 --> 00:11:38,480
setnx

299
00:11:38,480 --> 00:11:40,180
exist

300
00:11:42,380 --> 00:11:43,940
setnx

301
00:11:45,280 --> 00:11:46,080
如果不是

302
00:11:48,360 --> 00:11:50,100
这个翻译下就是什么啊

303
00:11:50,600 --> 00:11:51,080
如果

304
00:11:52,080 --> 00:11:53,220
如果不存在

305
00:11:54,080 --> 00:11:54,980
就复制

306
00:11:54,980 --> 00:11:55,860
啊

307
00:11:59,280 --> 00:12:00,360
这个能看懂吗

308
00:12:00,360 --> 00:12:01,500
嗯啊

309
00:12:01,500 --> 00:12:01,880
那

310
00:12:02,400 --> 00:12:26,700
他们同时调用这个setnx

311
00:12:26,700 --> 00:12:27,020
对吧

312
00:12:27,940 --> 00:12:28,840
然后a成功了

313
00:12:28,840 --> 00:12:29,240
好

314
00:12:29,240 --> 00:12:29,900
a成功了

315
00:12:30,840 --> 00:12:32,600
然后a1呢这个时候又来setnx

316
00:12:32,600 --> 00:12:34,180
他也来setnx

317
00:12:34,180 --> 00:12:35,540
这个时候他能成功吗

318
00:12:36,820 --> 00:12:37,460
不能不能

319
00:12:37,460 --> 00:12:37,680
不能

320
00:12:38,000 --> 00:12:39,140
那他是不是就失败了

321
00:12:39,940 --> 00:12:40,260
对

322
00:12:40,700 --> 00:12:41,020
啊

323
00:12:41,620 --> 00:12:42,600
那不就完了吗

324
00:12:43,880 --> 00:12:45,400
那是不是就满足这个需求了

325
00:12:46,740 --> 00:12:47,060
对

326
00:12:47,760 --> 00:12:48,040
哦

327
00:12:48,040 --> 00:12:48,440
明白

328
00:12:50,860 --> 00:12:51,240
对吧

329
00:12:51,240 --> 00:12:51,360
对吧

330
00:12:51,360 --> 00:12:52,060
其实就这么简单

331
00:12:52,060 --> 00:12:53,020
只不过

332
00:12:53,020 --> 00:12:53,180
嗯

333
00:12:53,180 --> 00:12:53,700
redison

334
00:12:53,700 --> 00:12:54,360
分不失所呢

335
00:12:54,360 --> 00:12:55,340
他那个redison

336
00:12:55,340 --> 00:12:55,920
那个框架

337
00:12:55,920 --> 00:12:57,140
又给你做了很多扩展

338
00:12:57,140 --> 00:12:57,420
对吧

339
00:12:57,420 --> 00:12:59,440
然后你去搞什么可重做一个字经验啊

340
00:12:59,440 --> 00:13:00,380
还有说什么啊

341
00:13:00,380 --> 00:13:00,700
这个

342
00:13:01,440 --> 00:13:02,220
超市取消呀

343
00:13:02,220 --> 00:13:03,000
这么出如此类的

344
00:13:03,000 --> 00:13:03,960
还有各种公布

345
00:13:03,960 --> 00:13:04,220
公布

346
00:13:04,220 --> 00:13:04,340
一样

347
00:13:04,340 --> 00:13:06,020
那个就扩展就先不先不讲了

348
00:13:06,020 --> 00:13:06,360
对吧

349
00:13:06,360 --> 00:13:07,400
还有开门狗的机制

350
00:13:07,700 --> 00:13:08,340
越的机制

351
00:13:08,340 --> 00:13:08,980
你可以再看看

352
00:13:08,980 --> 00:13:10,680
就是他的原理是这么个

353
00:13:11,180 --> 00:13:12,740
然后我们有时候面试他会问啊

354
00:13:12,740 --> 00:13:14,640
那分不错一般用redis对吧

355
00:13:14,640 --> 00:13:17,820
那还有哪些框架可以用redis飞机时间分布置锁呀

356
00:13:17,820 --> 00:13:18,300
my circle

357
00:13:19,040 --> 00:13:19,360
啊

358
00:13:19,360 --> 00:13:19,900
对

359
00:13:19,900 --> 00:13:20,280
zk

360
00:13:20,720 --> 00:13:21,600
对都可以

361
00:13:21,600 --> 00:13:22,020
对吧

362
00:13:22,020 --> 00:13:23,200
其实什么意思呢

363
00:13:23,680 --> 00:13:24,080
my circle

364
00:13:24,840 --> 00:13:25,520
很简单呀

365
00:13:25,520 --> 00:13:25,660
就

366
00:13:26,480 --> 00:13:27,300
唯一锁引呗

367
00:13:27,300 --> 00:13:27,600
对吧

368
00:13:29,680 --> 00:13:30,180
对吧

369
00:13:30,520 --> 00:13:31,860
就就就往里插入就完了

370
00:13:31,860 --> 00:13:33,080
反正只有一个人能插成功

371
00:13:33,080 --> 00:13:34,300
那zk就是什么

372
00:13:34,300 --> 00:13:35,780
临时顺序节点

373
00:13:35,780 --> 00:13:37,600
就是我们再次强调

374
00:13:37,600 --> 00:13:39,500
只要他能够保证分布置环境下面

375
00:13:39,500 --> 00:13:41,400
只有一个线程能够获取到锁就可以了

376
00:13:41,400 --> 00:13:43,260
只不过这个锁刚才我说是抽象的

377
00:13:43,260 --> 00:13:43,540
对吧

378
00:13:43,540 --> 00:13:47,040
在redis里面就是这个setX这个命令这个放的这个值

379
00:13:47,040 --> 00:13:48,720
my circle里面的是个唯一锁引

380
00:13:48,720 --> 00:13:50,720
zk里面是个临时的顺序节点

381
00:13:52,500 --> 00:13:53,620
这个锁是个抽象的

382
00:13:53,620 --> 00:13:55,840
他用不同的时间有不同的不同的这个定义

383
00:13:55,840 --> 00:13:57,060
就这么点啊

384
00:14:00,560 --> 00:14:01,860
然后他也会问啊

385
00:14:01,860 --> 00:14:02,820
这块懂了吧

386
00:14:03,200 --> 00:14:03,700
懂了

387
00:14:03,700 --> 00:14:04,900
他又会问要

388
00:14:04,900 --> 00:14:06,720
那你这么为什么要用redis呢

389
00:14:06,720 --> 00:14:07,660
做分不是走的

390
00:14:07,660 --> 00:14:08,640
你为什么不用my circle呢

391
00:14:08,640 --> 00:14:09,820
不用zk呢

392
00:14:14,900 --> 00:14:15,300
因为

393
00:14:15,300 --> 00:14:17,820
因为redis实现

394
00:14:18,700 --> 00:14:20,340
相对来说实现比较容易

395
00:14:20,340 --> 00:14:23,360
然后框架比较完善的功能

396
00:14:24,860 --> 00:14:25,920
唯一出展吗

397
00:14:25,920 --> 00:14:26,660
啊

398
00:14:27,560 --> 00:14:28,500
这样说也行啊

399
00:14:28,500 --> 00:14:28,880
就是说

400
00:14:32,420 --> 00:14:33,600
为什么用redis

401
00:14:33,600 --> 00:14:34,800
我们用分不是走啊

402
00:14:34,800 --> 00:14:35,720
首先要强调一件事

403
00:14:35,720 --> 00:14:36,440
他的效率

404
00:14:38,380 --> 00:14:39,040
谁最高

405
00:14:39,580 --> 00:14:40,240
为什么用

406
00:14:55,920 --> 00:14:56,640
redis

407
00:15:01,540 --> 00:15:02,840
因为他是机器内存的呀

408
00:15:03,380 --> 00:15:03,840
对吧

409
00:15:06,080 --> 00:15:06,500
没了

410
00:15:06,500 --> 00:15:07,740
分不是走可能就讲到这

411
00:15:08,120 --> 00:15:09,720
可能面试的时候还要问你他的一些

412
00:15:10,260 --> 00:15:12,820
那个什么redis的那个卧士多格那个机身那个

413
00:15:12,820 --> 00:15:13,680
回头再说吧

414
00:15:14,340 --> 00:15:14,620
OK

415
00:15:17,740 --> 00:15:18,200
可以啊

416
00:15:18,200 --> 00:15:19,760
应该有还有不同的吗

417
00:15:23,420 --> 00:15:23,700
没有

418
00:15:24,440 --> 00:15:24,980
其他人

419
00:15:25,740 --> 00:15:26,260
也没有

420
00:15:26,800 --> 00:15:27,220
好

421
00:15:27,220 --> 00:15:27,720
下会

422
00:15:30,380 --> 00:15:30,800
拜拜

423
00:15:30,800 --> 00:15:32,620
一会把这个发到群里吧

424
00:15:34,180 --> 00:15:34,600
拜拜

425
00:15:34,600 --> 00:15:35,320
拜拜

426
00:15:35,320 --> 00:15:35,500
拜拜

427
00:15:35,500 --> 00:15:38,780
explica

428
00:15:38,780 --> 00:15:39,140
请不吝点赞 订阅 转发 打赏支持明镜与点点栏目

